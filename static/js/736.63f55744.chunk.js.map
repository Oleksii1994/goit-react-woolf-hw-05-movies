{"version":3,"file":"static/js/736.63f55744.chunk.js","mappings":"2UAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAuB,mCAAG,8FACxBF,EAAAA,EAAAA,IAAA,uCAA0CC,IADlB,mFAAH,qDAIvBE,EAAc,mCAAG,WAAMC,GAAN,iFACfJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAuCH,EAAvC,oBADe,mFAAH,sDAIdI,EAAuB,mCAAG,WAAMC,GAAN,iFACxBN,EAAAA,EAAAA,IAAA,gCACcC,EADd,iCAC0CK,EAD1C,YADwB,mFAAH,sDAMvBC,EAAc,mCAAG,WAAMH,GAAN,iFACfJ,EAAAA,EAAAA,IAAA,iBACDI,EADC,4BAC0BH,EAD1B,oBADe,mFAAH,sDAMdO,EAAiB,mCAAG,WAAMJ,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,iBACDI,EADC,4BAC0BH,EAD1B,oBADkB,mFAAH,sDAMjBQ,EAAiB,mCAAG,WAAML,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,iBACDI,EADC,2BACyBH,EADzB,oBADkB,mFAAH,qD,oLC7BjBS,EAAWC,EAAAA,EAAAA,GAAH,wSAaRC,EAAkBD,EAAAA,EAAAA,IAAH,iEAKfE,EAAgBF,EAAAA,EAAAA,GAAH,gIAUbG,EAAiBH,EAAAA,EAAAA,IAAH,wNAadI,EAAaJ,EAAAA,EAAAA,IAAH,8C,SCgBvB,EA/Ca,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QAiBR,OAfAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,gHAIFd,EAAAA,EAAAA,IAAeH,GAJb,gBAGFa,EAHE,EAGVK,KAAQL,KAGVC,GAAQK,EAAAA,EAAAA,IAAeN,IANX,gDAQZC,EAAQ,IARI,yDAAH,qDAWbG,GACD,GAAE,CAACjB,IAEIa,EAAKO,QAGX,SAACX,EAAD,UACGI,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,aAA7B,OACR,UAACnB,EAAD,YACE,SAACE,EAAD,WACE,SAACG,EAAD,CACEe,IACED,EAAY,0CAC2BA,GAD3B,iGAIdE,IAAKH,EACLI,MAAM,MACNC,OAAO,WAGX,UAACnB,EAAD,YACE,wBAAKc,KACL,uBAAID,SAfOD,EADP,OAHZ,cAAGQ,UAAU,MAAb,yDAyBH,C,wGCzDM,IAAMC,EAAmB,SAAAC,GAAG,OACjCA,EAAIX,KAAI,kBAAiC,CACvCY,GADM,EAAGA,GAETC,YAFM,EAAOA,YAGbC,MAHM,EAAoBA,MAApB,GADyB,EAOtBC,EAAoB,SAAAJ,GAC/B,OAAOA,EAAIX,KAAI,kBAAsB,CACnCY,GADa,EAAGA,GAEhBI,QAFa,EAAOA,QAAP,GAIhB,EAEYlB,EAAiB,SAAAa,GAC5B,OAAOA,EAAIX,KAAI,kBAAiD,CAC9DC,QADa,EAAGA,QAEhBC,UAFa,EAAYA,UAGzBC,KAHa,EAAuBA,KAIpCC,aAJa,EAA6BA,aAA7B,GAMhB,C","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/helpers.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '298a5b49d75fb843dc4c4c38d9d64139';\n\nexport const fetchTrendingMoviesData = async () => {\n  return await axios.get(`/trending/movie/week?api_key=${KEY}`);\n};\n\nexport const fetchMovieInfo = async movieId => {\n  return await axios.get(`/movie/${movieId}?api_key=${KEY}&language=en-US`);\n};\n\nexport const fetchMoviesBySearchWord = async searchWord => {\n  return await axios.get(\n    `/search/movie?api_key=${KEY}&language=en-US&query=${searchWord}&page=1`\n  );\n};\n\nexport const fetchMovieCast = async movieId => {\n  return await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n};\n\nexport const fetchMovieReviews = async movieId => {\n  return await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  return await axios.get(\n    `/movie/${movieId}/videos?api_key=${KEY}&language=en-US`\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CastItem = styled.li`\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #af93aa12;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 280px;\n  transition-duration: 250ms;\n  transition-property: scale;\n  transition-timing-function: ease-in-out;\n`;\n\nexport const ProfileImgThumb = styled.div`\n  // width: 280px;\n  // height: 352px;\n`;\n\nexport const ActorsGallery = styled.ul`\n  padding: 32px 0;\n\n  display: flex;\n\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const ActorNameThumb = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  justify-content: center;\n  align-items: center;\n\n  height: 60px;\n  padding: 16px 0;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const ActorPhoto = styled.img`\n  object-fit: cover;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'api/api';\nimport { normalizedCast } from 'helpers/helpers';\nimport {\n  CastItem,\n  ProfileImgThumb,\n  ActorsGallery,\n  ActorNameThumb,\n  ActorPhoto,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchMovieCast(movieId);\n\n        setCast(normalizedCast(cast));\n      } catch (e) {\n        setCast([]);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return !cast.length ? (\n    <p className=\"msg\">Possibly, there is no information about cast</p>\n  ) : (\n    <ActorsGallery>\n      {cast.map(({ cast_id, character, name, profile_path }) => (\n        <CastItem key={cast_id}>\n          <ProfileImgThumb>\n            <ActorPhoto\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : `https://as1.ftcdn.net/v2/jpg/05/64/45/52/1000_F_564455291_RRMiR6jlecxRBpSdtOT1KAX8a8FRhinM.jpg`\n              }\n              alt={name}\n              width=\"280\"\n              height=\"420\"\n            />\n          </ProfileImgThumb>\n          <ActorNameThumb>\n            <h3>{name}</h3>\n            <p>{character}</p>\n          </ActorNameThumb>\n        </CastItem>\n      ))}\n    </ActorsGallery>\n  );\n};\n\nexport default Cast;\n","export const normalizedMovies = arr =>\n  arr.map(({ id, poster_path, title }) => ({\n    id,\n    poster_path,\n    title,\n  }));\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content }) => ({\n    id,\n    content,\n  }));\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    cast_id,\n    character,\n    name,\n    profile_path,\n  }));\n};\n"],"names":["axios","KEY","fetchTrendingMoviesData","fetchMovieInfo","movieId","fetchMoviesBySearchWord","searchWord","fetchMovieCast","fetchMovieReviews","fetchTrailerVideo","CastItem","styled","ProfileImgThumb","ActorsGallery","ActorNameThumb","ActorPhoto","useState","cast","setCast","useParams","useEffect","getCast","data","normalizedCast","length","map","cast_id","character","name","profile_path","src","alt","width","height","className","normalizedMovies","arr","id","poster_path","title","normalizedReviews","content"],"sourceRoot":""}