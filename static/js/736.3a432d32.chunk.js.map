{"version":3,"file":"static/js/736.3a432d32.chunk.js","mappings":"2UAEaA,EAAM,mCAENC,EAAuB,mCAAG,uGAEtBC,EAAAA,EAAAA,IAAA,mEACiDF,IAH3B,wEAMnCG,QAAQC,IAAR,MANmC,wDAAH,qDAUvBC,EAAc,mCAAG,WAAMC,GAAN,0FAEbJ,EAAAA,EAAAA,IAAA,6CAC2BI,EAD3B,oBAC8CN,EAD9C,oBAFa,wEAM1BG,QAAQC,IAAR,MAN0B,wDAAH,sDAUdG,EAAuB,mCAAG,WAAMC,GAAN,0FAEtBN,EAAAA,EAAAA,IAAA,4DAC0CF,EAD1C,iCACsEQ,EADtE,YAFsB,wEAMnCL,QAAQC,IAAR,MANmC,wDAAH,sDAUvBK,EAAc,mCAAG,WAAMH,GAAN,0FAEbJ,EAAAA,EAAAA,IAAA,6CAC2BI,EAD3B,4BACsDN,EADtD,oBAFa,wEAM1BG,QAAQC,IAAR,MAN0B,wDAAH,sDAUdM,EAAiB,mCAAG,WAAMJ,GAAN,0FAEhBJ,EAAAA,EAAAA,IAAA,6CAC2BI,EAD3B,4BACsDN,EADtD,oBAFgB,wEAM7BG,QAAQC,IAAR,MAN6B,wDAAH,sDAUjBO,EAAiB,mCAAG,WAAML,GAAN,0FAEhBJ,EAAAA,EAAAA,IAAA,6CAC2BI,EAD3B,2BACqDN,EADrD,oBAFgB,wEAM7BG,QAAQC,IAAR,MAN6B,wDAAH,qD,0KCpDjBQ,EAAWC,EAAAA,EAAAA,GAAH,wSAaRC,EAAkBD,EAAAA,EAAAA,IAAH,iEAKfE,EAAgBF,EAAAA,EAAAA,GAAH,gIAUbG,EAAiBH,EAAAA,EAAAA,IAAH,wNAadI,EAAaJ,EAAAA,EAAAA,IAAH,8C,SC0BvB,EA1Da,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QA4BR,OAjBAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,gHAIFd,EAAAA,EAAAA,IAAeH,GAJb,uBAGFa,EAHE,EAGVK,KAAQL,KAGVC,EAAuBD,EAfhBM,KAAI,kBAAiD,CAC9DC,QADa,EAAGA,QAEhBC,UAFa,EAAYA,UAGzBC,KAHa,EAAuBA,KAIpCC,aAJa,EAA6BA,aAA7B,KASC,kBAQLV,GARK,gCAUZC,EAAQ,IAVI,yDAAH,qDAabG,GACD,GAAE,CAACjB,IAEIa,EAAKW,QAGX,SAACf,EAAD,UACGI,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,aAA7B,OACR,UAACjB,EAAD,YACE,SAACE,EAAD,WACE,SAACG,EAAD,CACEc,IACEF,EAAY,0CAC2BA,GAD3B,iGAIdG,IAAKJ,EACLK,MAAM,MACNC,OAAO,WAGX,UAAClB,EAAD,YACE,wBAAKY,KACL,uBAAID,SAfOD,EADP,OAHZ,cAAGS,UAAU,MAAb,yDAyBH,C","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const KEY = '298a5b49d75fb843dc4c4c38d9d64139';\n\nexport const fetchTrendingMoviesData = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchMovieInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchMoviesBySearchWord = async searchWord => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchWord}&page=1`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastItem = styled.li`\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: #af93aa12;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 280px;\n  transition-duration: 250ms;\n  transition-property: scale;\n  transition-timing-function: ease-in-out;\n`;\n\nexport const ProfileImgThumb = styled.div`\n  // width: 280px;\n  // height: 352px;\n`;\n\nexport const ActorsGallery = styled.ul`\n  padding: 32px 0;\n\n  display: flex;\n\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const ActorNameThumb = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  justify-content: center;\n  align-items: center;\n\n  height: 60px;\n  padding: 16px 0;\n  text-align: center;\n  font-size: 12px;\n`;\n\nexport const ActorPhoto = styled.img`\n  object-fit: cover;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'api/api';\nimport {\n  CastItem,\n  ProfileImgThumb,\n  ActorsGallery,\n  ActorNameThumb,\n  ActorPhoto,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  const normalizedCast = arr => {\n    return arr.map(({ cast_id, character, name, profile_path }) => ({\n      cast_id,\n      character,\n      name,\n      profile_path,\n    }));\n  };\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchMovieCast(movieId);\n\n        setCast(normalizedCast(cast));\n\n        return cast;\n      } catch (e) {\n        setCast([]);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return !cast.length ? (\n    <p className=\"msg\">Possibly, there is no information about cast</p>\n  ) : (\n    <ActorsGallery>\n      {cast.map(({ cast_id, character, name, profile_path }) => (\n        <CastItem key={cast_id}>\n          <ProfileImgThumb>\n            <ActorPhoto\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : `https://as1.ftcdn.net/v2/jpg/05/64/45/52/1000_F_564455291_RRMiR6jlecxRBpSdtOT1KAX8a8FRhinM.jpg`\n              }\n              alt={name}\n              width=\"280\"\n              height=\"420\"\n            />\n          </ProfileImgThumb>\n          <ActorNameThumb>\n            <h3>{name}</h3>\n            <p>{character}</p>\n          </ActorNameThumb>\n        </CastItem>\n      ))}\n    </ActorsGallery>\n  );\n};\n\nexport default Cast;\n"],"names":["KEY","fetchTrendingMoviesData","axios","console","log","fetchMovieInfo","movieId","fetchMoviesBySearchWord","searchWord","fetchMovieCast","fetchMovieReviews","fetchTrailerVideo","CastItem","styled","ProfileImgThumb","ActorsGallery","ActorNameThumb","ActorPhoto","useState","cast","setCast","useParams","useEffect","getCast","data","map","cast_id","character","name","profile_path","length","src","alt","width","height","className"],"sourceRoot":""}